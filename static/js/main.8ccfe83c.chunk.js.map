{"version":3,"sources":["components/Loading/loading.tsx","components/Loading/index.ts","assets/theme/colors.ts","routes.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["loading","keyframes","variants","variant","prop","base","position","display","justifyContent","alignItems","top","bottom","left","right","zIndex","bg","props","colors","white","default","width","height","border","borderColor","opacity","borderRadius","animationDelay","Style","styled","div","space","layout","Loading","styling","className","memo","dark","this","contrast","light","ligth","Home","React","lazy","exact","path","fallback","GlobalStyle","createGlobalStyle","theme","fontFamily","color","App","useState","themeMode","setThemeModColor","useMemo","useEffect","themeModeStorage","localStorage","getItem","breakpoints","desktop","toggleTheme","setItem","prevState","text","background","basename","process","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6lBAMA,IAAMA,EAAUC,oBAAH,KAiBPC,EAAWC,kBAAQ,CACrBC,KAAM,UACNF,SAAU,CACNG,KAAM,CACF,kBAAmB,CACfC,SAAU,WACVC,QAAS,OACTC,eAAgB,SAChBC,WAAY,SACZC,IAAK,IACLC,OAAQ,IACRC,KAAM,IACNC,MAAO,IACPC,OAAQ,MACRC,GAAI,SAACC,GAAD,gBACGA,EAAMC,OAAOC,MAAMC,QADtB,OAEJ,WAAY,CACRZ,QAAS,eACTD,SAAU,WACVc,MAAO,OACPC,OAAQ,OACR,QAAS,CACLf,SAAU,WACVgB,OAAQ,YACRC,YAAa,eACbC,QAAS,IACTC,aAAc,OAElB,qBAAsB,CAClBC,eAAgB,eAQlCC,EAAsCC,UAAOC,IAAV,IACnC3B,EACA4B,QACAC,SAEe/B,GAIfgC,EAAoB,kBACtB,cAACL,EAAD,CAAOM,QAAQ,OAAf,SACI,qBAAKC,UAAU,iBAAf,SACI,sBAAKA,UAAU,UAAf,UACI,wBACA,gCAMDC,iBAAKH,GC9ELA,O,uJCiDAf,EAnDA,eAACmB,EAAD,8DAAmB,CAC9BA,OACA,cACI,MAAO,CACHjB,SAASkB,KAAKD,KAAO,WACrBE,UAAUD,KAAKD,KAAO,WACtBA,KAAM,UACNG,MAAO,YAGf,iBACI,MAAO,CACHpB,QAASkB,KAAKD,KAAO,UAAY,UACjCE,SAAUD,KAAKD,KAAO,UAAY,UAClCA,KAAM,UACNI,MAAO,YAGf,cACI,MAAO,CACHrB,SAASkB,KAAKD,KAAO,WACrBA,KAAM,UACNG,MAAO,YAGf,aACI,MAAO,CACHpB,QAASkB,KAAKD,KAAO,UAAY,UACjCA,KAAM,UACNG,MAAO,YAGf,YACI,MAAO,CACHpB,QAASkB,KAAKD,KAAO,UAAY,UACjCE,SAAUD,KAAKD,KAAO,UAAY,UAClCA,KAAM,UACNI,MAAO,YAIf,WACI,MAAO,CACHrB,QAASkB,KAAKD,KAAO,UAAY,UACjCE,SAAUD,KAAKD,KAAO,UAAY,UAClCA,KAAM,UACNG,MAAO,c,eC1CbE,EAAOC,IAAMC,MAAK,kBAAM,uDAEfR,kBAAK,kBAChB,cAAC,IAAD,UACI,cAAC,IAAD,CAAOS,OAAK,EAACC,KAAK,IAAlB,SACI,cAAC,WAAD,CAAUC,SAAU,cAACd,EAAA,EAAD,IAApB,SACI,cAACS,EAAD,a,gKCDhB,IAAMM,EAAcC,4BAAH,KAEE,SAAChC,GAAD,OACXA,EAAMiC,MAAMC,cACP,SAAClC,GAAD,OACLA,EAAMiC,MAAME,SACI,SAACnC,GAAD,OAEdA,EAAMiC,MAAMlC,MAiDPqC,EA7CO,WAAO,IAAD,EACcC,mBAAS,SADvB,mBACjBC,EADiB,KACNC,EADM,KA2BxB,OAjBAN,QAAMhC,OAASuC,mBACX,8BAAC,eACMP,QAAMhC,QACNA,EAAqB,SAAdqC,MAEd,CAACA,IAGLG,qBAAU,WAAO,IAAD,EACNC,EAAgB,UAAGC,aAAaC,QAAQ,gBAAxB,QAAoC,QAC1DL,EAAiBG,KAClB,IAGHT,QAAMY,YAAYC,QAAU,QAC5Bb,QAAMY,YAAY,GAAK,QAGnB,cAAC,gBAAD,CACIZ,MAAK,2BACEA,SADF,IAEDc,YA5BO,WACfJ,aAAaK,QAAQ,QAAuB,UAAdV,EAAwB,OAAS,SAC/DC,GAAiB,SAACU,GAAD,MACC,UAAdA,EAAwB,OAAS,YA0B7Bf,WAAY,0BACZC,MAAOF,QAAMhC,OAAOiD,KAAK/C,QACzBJ,GAAIkC,QAAMhC,OAAOkD,WAAWhD,UANpC,SASI,eAAC,IAAD,CAAQiD,SAAUC,aAAlB,UACI,cAAC,EAAD,IACA,cAACtB,EAAD,UC5CDuB,EAdS,SAACC,GACjBA,GAAeA,aAAuBC,UACtC,8BAAqBC,MACjB,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC/BJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCLxBQ,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,EAAD,MAEJC,SAASC,eAAe,SAM5Bb,M","file":"static/js/main.8ccfe83c.chunk.js","sourcesContent":["import React, { memo } from 'react';\nimport { layout, space, variant, VariantArgs } from 'styled-system';\nimport styled, { keyframes } from 'styled-components';\n\nimport { LoadingStyledProps } from './loading.types';\n\nconst loading = keyframes`\n  0% {\n    top: 36px;\n    left: 36px;\n    width: 0;\n    height: 0;\n    opacity: 1;\n  }\n  100% {\n    top: 0px;\n    left: 0px;\n    width: 72px;\n    height: 72px;\n    opacity: 0;\n  }\n`;\n\nconst variants = variant({\n    prop: 'styling',\n    variants: {\n        base: {\n            '.loading-screen': {\n                position: 'absolute',\n                display: 'flex',\n                justifyContent: 'center',\n                alignItems: 'center',\n                top: '0',\n                bottom: '0',\n                left: '0',\n                right: '0',\n                zIndex: 99999,\n                bg: (props: { colors: { white: { default: string } } }) =>\n                    `${props.colors.white.default}80`,\n                '.loading': {\n                    display: 'inline-block',\n                    position: 'relative',\n                    width: '80px',\n                    height: '80px',\n                    '& div': {\n                        position: 'absolute',\n                        border: '4px solid',\n                        borderColor: 'text.default',\n                        opacity: '1',\n                        borderRadius: '50%',\n                    },\n                    '& div:nth-child(2)': {\n                        animationDelay: '-0.5s',\n                    },\n                },\n            },\n        },\n    },\n} as VariantArgs);\n\nconst Style: React.FC<LoadingStyledProps> = styled.div<LoadingStyledProps>`\n    ${variants}\n    ${space}\n    ${layout}\n    .loading div {\n        animation: ${loading} 1s cubic-bezier(0, 0.2, 0.8, 1) infinite;\n    }\n`;\n\nconst Loading: React.FC = () => (\n    <Style styling=\"base\">\n        <div className=\"loading-screen\">\n            <div className=\"loading\">\n                <div></div>\n                <div></div>\n            </div>\n        </div>\n    </Style>\n);\n\nexport default memo(Loading);\n","import Loading from './loading';\n\nexport default Loading;\n","const colors = (dark = false) => ({\n    dark,\n    get primary() {\n        return {\n            default: this.dark ? '#51c1c3' : '#51c1c3',\n            contrast: this.dark ? '#51c1c3' : '#51c1c3',\n            dark: '#51c1c3',\n            light: '#51c1c3',\n        };\n    },\n    get background() {\n        return {\n            default: this.dark ? '#2d2e32' : '#f4f6fa',\n            contrast: this.dark ? '#202121' : '#f0f3f7',\n            dark: '#2d2e32',\n            ligth: '#f4f6fa',\n        };\n    },\n    get success() {\n        return {\n            default: this.dark ? '#51c1c3' : '#51c1c3',\n            dark: '#51c1c3',\n            light: '#51c1c3',\n        };\n    },\n    get danger() {\n        return {\n            default: this.dark ? '#ff4138' : '#d6342c',\n            dark: '#ff4138',\n            light: '#d6342c',\n        };\n    },\n    get white() {\n        return {\n            default: this.dark ? '#25262a' : '#FFFFFF',\n            contrast: this.dark ? '#313438' : '#fafbfc',\n            dark: '#2d2e32',\n            ligth: '#FFFFFF',\n        };\n    },\n\n    get text() {\n        return {\n            default: this.dark ? '#f8f9fa' : '#545b64',\n            contrast: this.dark ? '#FFFFFF' : '#353a40',\n            dark: '#f8f9fa',\n            light: '#545b64',\n        };\n    },\n});\n\nexport default colors;\n","import React, { memo, Suspense } from 'react';\nimport { Route, Switch } from 'react-router-dom';\n\nimport Loading from './components/Loading';\nconst Home = React.lazy(() => import('./containers/Home'));\n\nexport default memo(() => (\n    <Switch>\n        <Route exact path=\"/\">\n            <Suspense fallback={<Loading />}>\n                <Home />\n            </Suspense>\n        </Route>\n    </Switch>\n));\n","import React, { useEffect, useMemo, useState } from 'react';\nimport { ThemeProvider, createGlobalStyle } from 'styled-components';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { theme } from 'quarks-ui';\n\nimport colors from './assets/theme/colors';\nimport Routes from './routes';\nimport './assets/style/reset.css';\n\nconst GlobalStyle = createGlobalStyle`\n  body {\n    font-family: ${(props: { theme: { fontFamily: string; color: string } }) =>\n        props.theme.fontFamily};\n    color: ${(props: { theme: { fontFamily: string; color: string } }) =>\n        props.theme.color};\n    background-color: ${(props: {\n        theme: { fontFamily: string; color: string; bg: string };\n    }) => props.theme.bg};\n  }\n`;\n\nconst App: React.FC = () => {\n    const [themeMode, setThemeModColor] = useState('light');\n\n    const toggleMode = () => {\n        localStorage.setItem('theme', themeMode === 'light' ? 'dark' : 'light');\n        setThemeModColor((prevState) =>\n            prevState === 'light' ? 'dark' : 'light',\n        );\n    };\n\n    theme.colors = useMemo(\n        () => ({\n            ...theme.colors,\n            ...colors(themeMode === 'dark'),\n        }),\n        [themeMode],\n    );\n\n    useEffect(() => {\n        const themeModeStorage = localStorage.getItem('theme') ?? 'light';\n        setThemeModColor(themeModeStorage);\n    }, []);\n\n    // @ts-ignore\n    theme.breakpoints.desktop = '68rem';\n    theme.breakpoints[2] = '68rem';\n\n    return (\n        <ThemeProvider\n            theme={{\n                ...theme,\n                toggleTheme: toggleMode,\n                fontFamily: 'Nunito Sans, sans-serif',\n                color: theme.colors.text.default,\n                bg: theme.colors.background.default,\n            }}\n        >\n            <Router basename={process.env.PUBLIC_URL}>\n                <Routes />\n                <GlobalStyle />\n            </Router>\n        </ThemeProvider>\n    );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(\n            ({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n                getCLS(onPerfEntry);\n                getFID(onPerfEntry);\n                getFCP(onPerfEntry);\n                getLCP(onPerfEntry);\n                getTTFB(onPerfEntry);\n            },\n        );\n    }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}